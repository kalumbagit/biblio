Génère un projet frontend **React** moderne avec **Vite** ** TypeScript** et **React Router** pour une application de gestion de bibliothèque. Langue du projet : français. Utilise Tailwind CSS pour le style (design propre, responsive). Fournis une structure de code claire, composants réutilisables, hooks personnalisés, et une séparation nette entre présentation et logique. Inclure commentaires et README minimal.

Contraintes techniques :
- Outils : Vite + React , React Router, Tailwind CSS, Axios pour appels API, react-query (ou SWR) pour gestion des requêtes (caching + stale-while-revalidate), react-hook-form pour formulaires.
- Auth : JWT (stockage sécurisé dans httpOnly cookie ou localStorage suivant choix — préciser les deux options et implémentation pour cookie dans README).
- Internationalisation minimale (i18next) prête à être étendue.
- Tests : Jest + React Testing Library pour quelques tests de composants/clés.
- Lint & format : ESLint (config), Prettier.
- CI : config de base GitHub Actions pour tests & build.

Fonctionnalités et routes :
- Route publique : `/` (landing), `/login`, `/register`, `/books`, `/books/:id`, `/about`
- Route utilisateur connecté (role READER) : `/dashboard`, `/requests`, `/requests/new`, `/loans`, `/loans/:id`
- Routes secrétaire : `/secretary/requests` (file d'attente), `/secretary/loans/create`,`/secretary/books/:id/edit` ,`/secretary/books/:id/copies`,`/secretary/books/:id/copies/new`
- Routes admin :  `/admin/users`, `/admin/reports`
- Composants/pages principaux :
  - `Auth/Login`, `Auth/Register`, `Auth/Logout`
  - `Books/List`, `Books/Detail`
  - `Books/add`, `Books/update`
  - `Book/BookCard`, `Book/BookGallery` (support images multiples)
  - `Request/CreateRequestForm` (sélection livre(s), qty, validation)
  - `Request/RequestsList` (filtrage par statut), `Request/RequestDetail`
  - `Loan/CreateLoan` (sélection exemplaire(s) disponibles, définir dueDate)
  - `Loan/LoanList`, `Loan/LoanDetail` (retour, marquer late, créer pénalité)
  - `Penalty/PenaltyList` (valider paiement), `Suspension/List`
  - `User/Profile` (photo profil, historique prêts/pénalités)
  - `Notifications/Toast` global + `Notifications/List`
  - `Admin/Users` (suspendre/reactiver, voir historique,ajouter secretaire)
  - `Layout/Header`, `Layout/Footer`, `Layout/ProtectedRoute` (RBAC)
- UI/UX :
  - Responsive mobile-first
  - Barre de recherche globale (recherche livres par titre, auteur, isbn)
  - Pagination et infinite-scroll options pour listes longues
  - Indicateur de disponibilité d’un livre (`is_available`) visible sur chaque `BookCard`, avec nombre d’exemplaires dispo
  - Modales pour confirmations (approuver/rejeter demande, marquer paiement)
  - Upload d’images (preview côté client) lors de création/édition de livre (utiliser presigned URLs si backend supporte, sinon upload multipart)
  - Badges & chips pour statuts (PENDING, APPROVED, REJECTED, LATE, etc.)
  - Notifications in-app + e-mail placeholders (API)
- Intégration API (contrats REST) — exemples d’endpoints à implémenter côté backend (faciles à mapper aux models Django):
  - `POST /auth/register` { firstName, lastName, email, password, phone }
  - `POST /auth/login` { email, password } -> { token } (ou cookie)
  - `GET /books?search=&page=&page_size=&category=&author=` -> paginated list
  - `GET /books/:id` -> book detail (includes `available_copies`, `images`, `authors`, `categories`)
  - `POST /books` (admin) multipart/form-data (images)
  - `GET /books/:id/copies` -> list of BookCopy with `available` boolean
  - `POST /loan-requests` { items: [{ bookId, qty }] }
  - `GET /loan-requests?status=PENDING` (secretary)
  - `PUT /loan-requests/:id/approve` { secretaryId } -> reserves copies / creates Loan on pickup
  - `PUT /loan-requests/:id/reject` { reason }
  - `POST /loans` { requestId, items: [{ bookCopyId }], dueDate }
  - `PUT /loans/:id/return` { returnDate, items: [{ bookCopyId, conditionIn }] } -> returns penalties created if late
  - `GET /penalties?status=UNPAID` ; `PUT /penalties/:id/validate-payment`
  - `GET /users/:id` -> profile, penaltiesCountYear, suspensions
  - `POST /suspensions` (auto or admin)
  - `GET /notifications` ; `POST /notifications/mark-read`
- Gestion du state & logique:
  - Utiliser `react-query` pour fetch/caching avec hooks personnalisés (`useBooks`, `useBook`, `useLoanRequests`, ...)
  - Hooks forms avec `react-hook-form` +  validation côté client
  - Timeout & retry policy pour appels API; gestion errors globally via interceptor Axios
  - Optimistic updates sur approbation/rejet et validation de pénalités pour UX réactive
- Sécurité & RBAC:
  - Implémenter `ProtectedRoute` qui vérifie rôle (READER / SECRETARY / ADMIN) et redirige sinon
  - Stocker token dans cookie httpOnly si backend le propose (préconisé), sinon localStorage avec refresh token
  - CSRF consideration doc dans README si cookie utilisé
- Tests & qualité:
  - Fournir tests unitaires pour : `BookCard`, `Login` form, `ProtectedRoute`
  - Fournir tests d’intégration simples pour flows critiques (login -> create request -> secretary approves -> create loan)
- Scripts & dev helpers:
  - `npm run dev`, `npm run build`, `npm run preview`, `npm run test`, `npm run lint`, `npm run format`
  - `.env.example` avec variables : `VITE_API_BASE_URL`, `VITE_AUTH_STRATEGY`, `VITE_APP_NAME`
- Documentation:
  - README expliquant architecture, routes, commandes, variables d’environnement, instructions pour connecter au backend Django (endpoints recommandés).
  - Postman collection (ou fichier HTTP) minimal pour tester endpoints CRUD.



